{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///app/app-routing.module.ts","webpack:///app/app.component.ts","webpack:///app/app.component.html","webpack:///app/app.module.ts","webpack:///app/home/home.component.ts","webpack:///app/home/home.component.html","webpack:///app/question/question.component.ts","webpack:///app/question/question.component.html","webpack:///app/surveys/survey.service.ts","webpack:///environments/environment.ts","webpack:///main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","surveyService","title","errorMessage","console","log","getSurveys","subscribe","data","surveys","getSurvey","next","survey","currentSurvey","error","err","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","HomeComponent","QuestionComponent","selectedValue","currentQuestion","buttonClicked","show","showVolgende","questionForm","answers","currentQuestionObject","questions","filter","question","number","undefined","answerOptionsArray","answerOptions","forEach","answerOption","push","value","clicked","setChosenAnswer","chosenAnswerAsArray","chosenAnswer","correct","setAnswersToRadiobuttons","_currentSurvey","onFormSubmit","SurveyService","http","surveyUrl","get","pipe","JSON","stringify","handleError","find","s","ErrorEvent","message","status","providedIn","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {HomeComponent} from \"./home/home.component\";\r\nimport {QuestionComponent} from \"./question/question.component\";\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: HomeComponent},\r\n  {path: 'home', component: HomeComponent},\r\n  {path: 'question', component: QuestionComponent},\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Survey } from './surveys/survey';\r\nimport { SurveyService } from './surveys/survey.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n\r\n  title = 'Welkom bij de survey';\r\n\r\n\r\n  errorMessage = '';\r\n  currentSurvey: Survey;\r\n  surveys: Survey[];\r\n\r\n\r\n  constructor(\r\n    private surveyService: SurveyService) {\r\n    console.log(\"constructor van AppComponent\");\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    console.log('ngInit van AppComponent');\r\n    this.surveyService.getSurveys().subscribe(data => {\r\n      this.surveys = data;\r\n    });\r\n  }\r\n\r\n  getSurvey(id: number) {\r\n    this.surveyService.getSurvey(id).subscribe({\r\n      next: survey => this.currentSurvey = survey,\r\n      error: err => this.errorMessage = err\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<router-outlet></router-outlet>\r\n\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { QuestionComponent } from './question/question.component';\r\nimport {SurveyService} from \"./surveys/survey.service\";\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport {FormsModule} from \"@angular/forms\";\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    QuestionComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n  ],\r\n  providers: [SurveyService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n\r\n","<div class=\"jumbotron-fluid\" Style=\"background-image: url('./assets/images/code.jpg');\">\r\n  <div class=\"container mx-auto\">\r\n    <div class=\"row\">\r\n      <h1 class='mx-auto' style=\"margin-top: 4rem;\" >Welkom bij de Ordina developers Quiz!</h1>\r\n    </div>\r\n    <div class=\"row\">\r\n      <h2 class='mx-auto'><button [routerLink]=\"['/question']\" class=\"btn btn-dark btn-lg btn-block\">Start Quiz</button></h2>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AnswerOptions, Question, Survey } from '../surveys/survey';\r\nimport { SurveyService } from '../surveys/survey.service';\r\nimport { FormControl, FormGroup, FormsModule, Validators } from '@angular/forms';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.css']\r\n})\r\nexport class QuestionComponent implements OnInit {\r\n\r\n  answers: string[];\r\n  answerOptionsArray: AnswerOptions[];\r\n  chosenAnswer: AnswerOptions;\r\n  selectedValue: String = '';\r\n  currentQuestion = 0;\r\n  currentQuestionObject: Question;\r\n  buttonClicked = false;\r\n  show = true;\r\n  showVolgende = false;\r\n  public _currentSurvey: Survey;\r\n  private correct: boolean;\r\n  errorMessage = '';\r\n  questionForm = new FormGroup({\r\n    // gridradios: new FormControl()\r\n  });\r\n\r\n  ngOnInit(): void {\r\n    this.surveyService.getSurvey(1).subscribe({\r\n      next: survey => this.currentSurvey = survey,\r\n      error: err => this.errorMessage = err\r\n    });\r\n  }\r\n\r\n  constructor(\r\n    private surveyService: SurveyService) {\r\n    console.log('constructor van Question');\r\n  }\r\n\r\n\r\n  public get currentSurvey(): Survey {\r\n    return this._currentSurvey;\r\n  }\r\n\r\n  public set currentSurvey(value: Survey) {\r\n    this._currentSurvey = value;\r\n    this.setAnswersToRadiobuttons();\r\n  }\r\n\r\n  // hier wordt de String array\"answers\" geleegd in de functie,\r\n  // vervolgens wordt de array gelijk /gematched aan de answeroption van deze vraag die uit de database zijn gehaald\r\n  // In de forloop (HTML) wordt dan de answers gematched met dezelfde value waarde (dus antwoord A wordt radiobutton met Antwoord A)\r\n  setAnswersToRadiobuttons() {\r\n    this.answers = [];\r\n    this.currentQuestionObject = this.currentSurvey.questions.filter(question => {\r\n      return question.number === this.currentQuestion + 1;\r\n    })[0];\r\n    if (this.currentQuestionObject === undefined) {\r\n      console.log('geen volgende vraag!');\r\n      // hier wil je iets doen om naar een eindpagina te gaan.\r\n      return;\r\n    }\r\n    this.answerOptionsArray = this.currentQuestionObject.answerOptions;\r\n    this.answerOptionsArray.forEach(answerOption => {\r\n      this.answers.push(answerOption.value);\r\n    });\r\n  }\r\n\r\n  // deze functie laat het witte vlak met uitleg zien en reset de buttonclicked gelijk\r\n  // showvolgende knop wordt getoond\r\n  clicked() {\r\n    this.buttonClicked = !this.buttonClicked;\r\n    this.showVolgende = !this.showVolgende;\r\n  }\r\n\r\n\r\n  // Als je op submit drukt, laat het programma het witte vlak zien en verdwijnt de knop submit\r\n  // (dit gebeurd met show) en clicked() functie wordt aangeroepen.\r\n  // Tevens wordt het antwoord gekoppeld met het juiste antwoord dmv aanroepen setchosenanswer functie\r\n  onFormSubmit(questionForm: any) {\r\n    this.clicked();\r\n    this.show = !this.show;\r\n    console.log(this.selectedValue);\r\n    this.setChosenAnswer();\r\n  }\r\n\r\n  // hier vergelijk je het gekozen antwoord met het antwoord van het object answeroptions\r\n  setChosenAnswer() {\r\n    const chosenAnswerAsArray = this.answerOptionsArray.filter(answerOption => {\r\n      return answerOption.value === this.selectedValue;\r\n    });\r\n    this.chosenAnswer = chosenAnswerAsArray[0];\r\n    console.log(this.chosenAnswer);\r\n    console.log(this.chosenAnswer.correct);\r\n  }\r\n\r\n\r\n\r\n  onItemChange(value) {\r\n    console.log(' Value is : ', value);\r\n  }\r\n\r\n  // als je op knop \"volgende\" drukt wil je de volgende vraag laten zien\r\n  nextQuestion() {\r\n    this.currentQuestion++;\r\n    this.setAnswersToRadiobuttons();\r\n    this.show = true;\r\n    this.showVolgende = false;\r\n    this.buttonClicked = false;\r\n    this.selectedValue = null;\r\n    console.log('witte vlak is nu weg');\r\n  }\r\n\r\n}\r\n","<div class=\"jumbotron-fluid\" Style=\"background-image: url('./assets/images/traffic.jpg');\">\r\n  <div class=\"container mx-auto\">\r\n    <div class=\"row\">\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div>\r\n  {{ _currentSurvey?.surveyDescription }}\r\n</div>\r\n\r\n<div class=\"jumbotron-fluid\" Style=\"background-color:black;\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <h2 style=\"margin-top: 2rem;\"> {{ currentQuestionObject?.questionDescription}}</h2>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-sm-6\">\r\n        <form #questionForm=\"ngForm\" (ngSubmit)=\"onFormSubmit(questionForm)\">\r\n\r\n          <div class=\"radioBlok\" *ngFor=\"let answer of answers\">\r\n            <input type=\"radio\" name=\"answerButtons\" [(ngModel)]=\"selectedValue\" value=\"{{answer}}\">\r\n            <label class=\"antwoordLabel\">{{answer}}</label>\r\n          </div>\r\n\r\n          <button type=\"submit\" *ngIf=\"show\">\r\n            Submit\r\n          </button>\r\n\r\n        </form>\r\n      </div>\r\n\r\n      <div *ngIf=\"buttonClicked\" class=\"col-sm-6\" style=\"background-color: white\"\r\n        [ngStyle]=\"{ 'color': this.chosenAnswer.correct === true ? 'green' : 'red' }\"> {{this.chosenAnswer.answerExplanation}}</div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div class=\"row\" style=\"margin-top: 5px\" >\r\n    <div class=\"col-sm-12\"></div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-11\" Style=\"background-color:black;\" *ngIf=\"buttonClicked\">\r\n    </div>\r\n    <div class=\"col-1\" Style=\"background-color:black;\" *ngIf=\"showVolgende\">\r\n      <p style=\"margin: 1rem;\"><button class=\"btn btn-dark btn-lg\" (click)=\"nextQuestion()\">Volgende</button></p>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\n\r\nimport { Survey } from './survey';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SurveyService {\r\n\r\n // private surveyUrl = '/server/quiz/surveys';\r\n  private surveyUrl = 'http://localhost:8080/quiz/surveys';\r\n\r\n\r\n  constructor(private http: HttpClient) {\r\n    console.log('constructor van SurveyService');\r\n\r\n  }\r\n\r\n  getSurveys(): Observable<Survey[]> {\r\n    console.log('getSurveys');\r\n    return this.http.get<Survey[]>(this.surveyUrl)\r\n      .pipe(\r\n        tap(data => console.log('All: ' + JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getSurvey(id: number): Observable<Survey | undefined> {\r\n    console.log('getSurvey by id');\r\n    return this.getSurveys()\r\n      .pipe(\r\n        map((surveys: Survey[]) => surveys.find(s => s.id === id))\r\n      );\r\n  }\r\n\r\n  private handleError(err: HttpErrorResponse) {\r\n    // in a real world app, we may send the server to some remote logging infrastructure\r\n    // instead of just logging it to the console\r\n    let errorMessage = '';\r\n    if (err.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      errorMessage = `An error occurred: ${err.error.message}`;\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n\r\n}\r\n\r\n\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}