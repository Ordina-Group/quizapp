{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///app/app-routing.module.ts","webpack:///app/app.component.ts","webpack:///app/app.component.html","webpack:///app/app.module.ts","webpack:///app/endpage/endpage.component.ts","webpack:///app/endpage/endpage.component.html","webpack:///app/home/home.component.ts","webpack:///app/home/home.component.html","webpack:///app/homescreen/homescreen.component.ts","webpack:///app/homescreen/homescreen.component.html","webpack:///app/namescreen/namescreen.component.ts","webpack:///app/namescreen/namescreen.component.html","webpack:///app/question/question.component.ts","webpack:///app/question/question.component.html","webpack:///app/scoreboard/scoreboard.component.ts","webpack:///app/scoreboard/scoreboard.component.html","webpack:///app/services/submitAnswer.service.ts","webpack:///app/services/survey-score.service.ts","webpack:///app/services/survey.service.ts","webpack:///app/services/url.service.ts","webpack:///environments/environment.ts","webpack:///main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","errorMessage","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","EndpageComponent","surveyScoreService","correctAnswer","getCorrectAnswers","incorrectAnswer","getIncorrectAnswers","HomeComponent","HomescreenComponent","surveyService","router","console","log","chosenSurvey","getInitSurveys","navigate","onOpenSurveySubmit","NamescreenComponent","userName","setUserName","resetScores","onNaamSubmit","QuestionComponent","submittedAnswerService","currentQuestionNumber","survey","subscribe","currentSurvey","currentQuestion","questions","filter","question","number","undefined","date","Date","dateString","setFinishTimestamp","setFinishTimestampString","answerOptionsArray","answerOptions","submittedAnswer","surveyid","chosenAnswerId","chosenAnswer","questionid","answeredCorrect","postSubmittedAnswer","answerIsCorrect","saveAnswers","setAnswersToRadiobuttons","processAnswer","_currentSurvey","value","JSON","stringify","onFormSubmit","ScoreboardComponent","scoreEntry","getUserName","getFinishTimestamp","getFinishTimestampString","addHighScore","scoreEntries","getHighscores","SubmittedAnswerService","http","urlService","surveyUrl","url","post","providedIn","SurveyScoreService","inCorrectAnswer","finishTimestampString","isCorrect","finishTimestamp","SurveyService","get","next","push","sort","a","b","answersCorrect","err","error","ErrorEvent","message","status","UrlService","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {HomeComponent} from \"./home/home.component\";\r\nimport {QuestionComponent} from \"./question/question.component\";\r\nimport {EndpageComponent} from \"./endpage/endpage.component\";\r\nimport { HomescreenComponent } from './homescreen/homescreen.component';\r\nimport { NamescreenComponent } from './namescreen/namescreen.component';\r\nimport {ScoreboardComponent} from './scoreboard/scoreboard.component';\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: HomescreenComponent},\r\n  {path: 'home', component: HomeComponent},\r\n  {path: 'homescreen', component: HomescreenComponent},\r\n  {path: 'namescreen', component: NamescreenComponent},\r\n  {path: 'question', component: QuestionComponent},\r\n  {path: 'endpage', component:EndpageComponent},\r\n  {path: 'scoreboard', component: ScoreboardComponent},\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  title = 'Welkom bij de survey';\r\n\r\n  errorMessage = '';\r\n\r\n  constructor() {}\r\n  ngOnInit() {}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<nav class=\"navbar fixed-top\" Style=\"background-color: black; \">\r\n  <ul class=\"navbar-nav\" style=\"background-color: black\">\r\n    <li class=\"nav-item\">\r\n      <img src='./assets/images/ordinalogo.png'>\r\n    </li>\r\n  </ul>\r\n</nav>\r\n<router-outlet></router-outlet>\r\n\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { QuestionComponent } from './question/question.component';\r\nimport { SurveyService} from './services/survey.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule} from '@angular/forms';\r\nimport { EndpageComponent } from './endpage/endpage.component';\r\nimport { SubmittedAnswerService } from './services/submitAnswer.service';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HomescreenComponent } from './homescreen/homescreen.component';\r\nimport {NamescreenComponent} from './namescreen/namescreen.component';\r\nimport {ScoreboardComponent} from './scoreboard/scoreboard.component';\r\n// import { formatDate } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    QuestionComponent,\r\n    EndpageComponent,\r\n    HomescreenComponent,\r\n    NamescreenComponent,\r\n    ScoreboardComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [SurveyService, SubmittedAnswerService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport { SurveyScoreService } from '../services/survey-score.service';\r\n\r\n@Component({\r\n  selector: 'app-endpage',\r\n  templateUrl: './endpage.component.html',\r\n  styleUrls: ['./endpage.component.css']\r\n})\r\nexport class EndpageComponent implements OnInit {\r\n  correctAnswer: number;\r\n  incorrectAnswer: number;\r\n\r\n  constructor(private surveyScoreService: SurveyScoreService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.correctAnswer = this.surveyScoreService.getCorrectAnswers();\r\n    this.incorrectAnswer = this.surveyScoreService.getIncorrectAnswers();\r\n  }\r\n\r\n}\r\n","<div class=\"jumbotron-fluid\">\r\n  <div class=\"container mx-auto\" style=\"margin-top: 2rem\">\r\n    <div class=\"row\">\r\n      <h2>Dit was het einde van de Quiz!</h2>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<div class=\"jumbotron-fluid\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-3\"></div>\r\n      <div class=\"col-md-6\"><h3>Je hebt {{correctAnswer}} vra(a)g(en) goed beantwoord.</h3></div>\r\n      <div class=\"col-md-3\"></div>\r\n    </div>\r\n\r\n    <div class=\"row\" style=\"background-color: black\">\r\n      <div class=\"col-md-3\"></div>\r\n      <div class=\"col-md-6\"><h3>Je hebt {{incorrectAnswer}} vra(a)g(en) fout beantwoord.</h3></div>\r\n      <div class=\"col-md-3\"></div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <h2 class='mx-auto'><button [routerLink]=\"['/scoreboard']\" class=\"btn btn-dark btn-lg btn-block\">Ga naar het scorebord</button></h2>\r\n    </div>\r\n\r\n  </div>\r\n  </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n\r\n","<div class=\"jumbotron-fluid\" Style=\"background-image: url('./assets/images/code.jpg');\">\r\n  <div class=\"container mx-auto\">\r\n    <div class=\"row\">\r\n      <h1 class='mx-auto' style=\"margin-top: 4rem;\" >Welkom bij de Ordina developers Quiz!</h1>\r\n    </div>\r\n    <div class=\"row\" >\r\n      <h2 class='mx-auto' style=\"margin-top: 8rem;\" ><button [routerLink]=\"['/question']\" class=\"btn btn-dark btn-lg btn-block\">Start Quiz</button></h2>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {Survey} from \"../model/survey\";\r\nimport {SurveyService} from \"../services/survey.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-homescreen',\r\n  templateUrl: './homescreen.component.html',\r\n  styleUrls: ['./homescreen.component.css']\r\n})\r\nexport class HomescreenComponent implements OnInit {\r\n\r\n  chosenSurvey: number;\r\n\r\n  constructor(private surveyService: SurveyService, private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onOpenSurveySubmit() {\r\n    console.log(\"chosen survey: \" + this.chosenSurvey);\r\n    this.surveyService.getInitSurveys(this.chosenSurvey);\r\n    this.router.navigate(['/namescreen']);\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"jumbotron jumbotron-fluid\" Style=\"background-color:black\">\r\n  <div class=\"container mx-auto\">\r\n    <div class=\"row align-items-start\">\r\n      <h1 class='mx-auto' style=\"margin-top: 4rem;\" >Welkom bij de Ordina Quizapp!</h1>\r\n    </div>\r\n  </div>\r\n    <div class=\"container mx-auto\" style=\"margin-top: 4rem\">\r\n      <h2>Voer een Surveynummer in:</h2>\r\n      <form #homescreenForm=\"ngForm\" (ngSubmit)=\"onOpenSurveySubmit()\">\r\n        <div class=\"form-inline justify-content-center\">\r\n          <input class=\"form-control mr-1\" [(ngModel)]=\"chosenSurvey\" [ngModelOptions]=\"{standalone: true}\">\r\n          <button type=\"submit\"  class=\"btn btn-dark\">Open Survey</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n\r\n  <div class=\"container mx-auto\" style=\"margin-top: 4rem\">\r\n    <h2>Of:</h2>\r\n    <div class=\"form-inline justify-content-center\">\r\n      <button [routerLink]=\"['/namescreen']\" class=\"btn btn-dark\">Maak een nieuwe Survey</button>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {SurveyScoreService} from '../services/survey-score.service';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-namescreen',\r\n  templateUrl: './namescreen.component.html',\r\n  styleUrls: ['./namescreen.component.css']\r\n})\r\nexport class NamescreenComponent implements OnInit {\r\n\r\n  userName: string;\r\n\r\n  constructor(private surveyScoreService: SurveyScoreService,\r\n              private router: Router) {\r\n  }\r\n\r\n  onNaamSubmit() {\r\n    console.log('name entered: ' + this.userName);\r\n    this.surveyScoreService.setUserName(this.userName);\r\n    this.surveyScoreService.resetScores();\r\n    this.router.navigate(['/question']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n","<!--<div class=\"jumbotron-fluid\" Style=\"background-image: url('./assets/images/code.jpg');\">\r\n  <div class=\"container mx-auto\">\r\n    <div class=\"row\">\r\n      <h2 class='mx-auto' style=\"margin-top: 4rem;\" >Voer hier je naam in:</h2>\r\n    </div>\r\n    <div class=\"row\">\r\n      <form #namescreenForm=\"ngForm\" (ngSubmit)=\"onNaamSubmit()\">\r\n        <div class=\"form-name justify-content-center\">\r\n          <input class=\"form-control mr-1\" [(ngModel)]=\"userName\" [ngModelOptions]=\"{standalone: true}\">\r\n          <button type=\"submit\"  class=\"btn btn-dark\">Naar de eerste vraag</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>-->\r\n\r\n<div class=\"jumbotron jumbotron-fluid\" Style=\"background-color:black\">\r\n  <div class=\"container mx-auto\" style=\"margin-top: 4rem\">\r\n    <h2 class='mx-auto' style=\"margin-top: 4rem;\" >Voer hier je naam in:</h2>\r\n<!--    <div class=\"row\">\r\n    </div>-->\r\n    <form #homescreenForm=\"ngForm\" (ngSubmit)=\"onNaamSubmit()\">\r\n      <div class=\"form-inline justify-content-center\">\r\n        <input class=\"form-control mr-1\" size=\"15\" [(ngModel)]=\"userName\" [ngModelOptions]=\"{standalone: true}\">\r\n        <button type=\"submit\"  class=\"btn btn-dark\">Naar de eerste vraag</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { SurveyService } from '../services/survey.service';\r\nimport { SubmittedAnswer } from '../model/submittedanswer';\r\nimport { AnswerIsCorrect } from '../model/answeriscorrect';\r\nimport { NavigationExtras, Router} from \"@angular/router\";\r\nimport { AnswerOptions } from '../model/answerOptions';\r\nimport { Question } from '../model/question';\r\nimport { SubmittedAnswerService } from '../services/submitAnswer.service';\r\nimport { Survey } from '../model/survey';\r\nimport { SurveyScoreService } from '../services/survey-score.service';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.css']\r\n})\r\nexport class QuestionComponent implements OnInit {\r\n\r\n  public _currentSurvey: Survey;\r\n  currentQuestion: Question;\r\n  answerOptionsArray: AnswerOptions[];\r\n  chosenAnswer: AnswerOptions;\r\n\r\n  submittedAnswer: SubmittedAnswer;\r\n  answerIsCorrect: AnswerIsCorrect;\r\n\r\n  currentQuestionNumber = 0;\r\n  errorMessage = '';\r\n  private date: Date;\r\n  private dateString: string;\r\n\r\n  ngOnInit(): void {\r\n    this.surveyService.survey.subscribe(survey => {\r\n      this.currentSurvey = survey;\r\n    })\r\n  }\r\n\r\n  constructor(private surveyService: SurveyService,\r\n              private submittedAnswerService: SubmittedAnswerService,\r\n              private surveyScoreService: SurveyScoreService,\r\n              private router: Router) {\r\n  }\r\n\r\n  public get currentSurvey(): Survey {\r\n    return this._currentSurvey;\r\n  }\r\n\r\n  public set currentSurvey(value: Survey) {\r\n    this._currentSurvey = value;\r\n    console.log(\"survey is: \" + JSON.stringify(this._currentSurvey))\r\n    if(this._currentSurvey !== undefined && this._currentSurvey !== null){\r\n      console.log(\"setting buttons\")\r\n      console.log(this._currentSurvey.questions)\r\n      console.log(this._currentSurvey === undefined || this._currentSurvey === null)\r\n      console.log(this._currentSurvey)\r\n      this.setAnswersToRadiobuttons();\r\n    }\r\n  }\r\n\r\n  // hier wordt de String array\"answers\" geleegd in de functie,\r\n  // vervolgens wordt de array gelijk /gematched aan de answeroption van deze vraag die uit de database zijn gehaald\r\n  // In de forloop (HTML) wordt dan de answers gematched met dezelfde value waarde (dus antwoord A wordt radiobutton met Antwoord A)\r\n  setAnswersToRadiobuttons() {\r\n    this.currentQuestion = this.currentSurvey.questions.filter(question => {\r\n      return question.number === this.currentQuestionNumber + 1;\r\n    })[0];\r\n\r\n    if (this.currentQuestion === undefined) {\r\n      this.date = new Date();\r\n      this.dateString = formatDate(this.date, 'dd/MM/yyyy HH:mm:ss', 'en');\r\n      this.surveyScoreService.setFinishTimestamp(this.date);\r\n      this.surveyScoreService.setFinishTimestampString(this.dateString);\r\n      this.router.navigate(['/endpage']);\r\n      return;\r\n    }\r\n    this.answerOptionsArray = this.currentQuestion.answerOptions;\r\n\r\n  }\r\n\r\n\r\n  onFormSubmit() {\r\n    this.submittedAnswer = {surveyid: this.currentSurvey.id , chosenAnswerId: this.chosenAnswer.id , questionid: this.currentQuestion.number, answeredCorrect: false};\r\n    this.submittedAnswerService.postSubmittedAnswer(this.submittedAnswer).subscribe(answerIsCorrect => {\r\n      this.answerIsCorrect = answerIsCorrect;\r\n      this.saveAnswers();\r\n    })\r\n  }\r\n\r\n  // als je op knop \"volgende\" drukt wil je de volgende vraag laten zien\r\n  nextQuestion() {\r\n    this.currentQuestionNumber++;\r\n    this.setAnswersToRadiobuttons();\r\n    this.answerIsCorrect = null;\r\n    this.chosenAnswer = null;\r\n  }\r\n\r\n  //hier worden alle goede en foute antwoorden bijgehouden\r\n  saveAnswers(){\r\n    this.surveyScoreService.processAnswer(this.answerIsCorrect);\r\n  }\r\n\r\n}\r\n","<div class=\"jumbotron-fluid\" Style=\"background-image: url('./assets/images/traffic.jpg'); height: 250px\">\r\n  <div class=\"container mx-auto\">\r\n    <div class=\"row\">\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"jumbotron-fluid d-flex flex-column\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <h2> {{ currentQuestion?.questionDescription}}</h2>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"container\">\r\n    <div class=\"row col-sm-12\">\r\n    </div>\r\n\r\n    <div class=\"row col-sm-12\">\r\n      <!-- form-->\r\n      <form #questionForm=\"ngForm\" (ngSubmit)=\"onFormSubmit()\">\r\n\r\n        <div class=\"radioBlok\" *ngFor=\"let answerOption of answerOptionsArray\">\r\n          <input type=\"radio\" name=\"answerButtons\" [(ngModel)]=\"chosenAnswer\" [value]=\"answerOption\">\r\n          <label class=\"antwoordLabel\">{{answerOption.value}}</label>\r\n        </div>\r\n\r\n        <button class=\"btn btn-light btn-sm\" type=\"submit\" *ngIf=\"chosenAnswer?.value != null && answerIsCorrect == null\">\r\n          Submit\r\n        </button>\r\n\r\n      </form>\r\n      <div *ngIf=\"answerIsCorrect\" class=\"col-sm-6\" style=\"background-color: white\" [ngStyle]=\"{ 'color': answerIsCorrect?.isCorrect === true ? 'green' : 'red' }\">\r\n        {{answerIsCorrect.answerExplanation}}\r\n      </div>\r\n      \r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"container mx-auto\">\r\n  <div class=\"row col-sm-12\" style=\"margin: 5px; background-color: white\">\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-1\" Style=\"background-color:black;\" *ngIf=\"answerIsCorrect\">\r\n      <p style=\"margin: 1rem;\"><button class=\"btn btn-dark btn-lg\" (click)=\"nextQuestion()\">Volgende</button></p>\r\n    </div>\r\n  </div>\r\n\r\n</div>","import {Component, OnInit} from '@angular/core';\r\nimport {SurveyService} from '../services/survey.service';\r\nimport {SurveyScoreService} from '../services/survey-score.service';\r\nimport {ScoreEntry} from '../model/scoreEntry';\r\n\r\n@Component({\r\n  selector: 'app-scoreboard',\r\n  templateUrl: './scoreboard.component.html',\r\n  styleUrls: ['./scoreboard.component.css']\r\n})\r\nexport class ScoreboardComponent implements OnInit {\r\n\r\n  scoreEntry: ScoreEntry;\r\n  scoreEntries: ScoreEntry[];\r\n\r\n  constructor(private surveyService: SurveyService, private surveyScoreService: SurveyScoreService) {\r\n    this.scoreEntry =     {\r\n      'userName': surveyScoreService.getUserName(),\r\n      'answersCorrect': surveyScoreService.getCorrectAnswers(),\r\n      'finishTimestamp': surveyScoreService.getFinishTimestamp(),\r\n      'finishTimestampString': surveyScoreService.getFinishTimestampString(),\r\n    };\r\n    surveyService.addHighScore(this.scoreEntry);\r\n    this.scoreEntries = surveyService.getHighscores();\r\n//    this.surveyScoreService.resetScores();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n","<div class=\"jumbotron-fluid\">\r\n  <div class=\"container mx-auto\" style=\"margin-top: 2rem\">\r\n    <div class=\"row\">\r\n      <h2>High scores:</h2>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"container mx-auto\" style=\"margin-top: 4rem\">\r\n\r\n<table class='table'>\r\n  <thead>\r\n  <tr>\r\n    <th>Naam:</th>\r\n    <th>Score:</th>\r\n    <th>Tijdstip van afronding:</th>\r\n  </tr>\r\n  </thead>\r\n  <tbody>\r\n  <tr *ngFor='let scoreEntry of scoreEntries'>\r\n    <td>{{scoreEntry.userName}}</td>\r\n    <td>{{scoreEntry.answersCorrect}}</td>\r\n    <td>{{scoreEntry.finishTimestampString}}</td>\r\n  </tr>\r\n  </tbody>\r\n</table>\r\n</div>\r\n\r\n<div class=\"row\">\r\n  <h2 class='mx-auto'><button [routerLink]=\"['/namescreen']\" class=\"btn btn-dark btn-lg btn-block\">Probeer het nog een keer</button></h2>\r\n</div>\r\n\r\n\r\n<!--<div class=\"jumbotron-fluid\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-3\"></div>\r\n      <div class=\"col-md-6\"><h3>Je hebt {{correctAnswer}} vra(a)g(en) goed beantwoord.</h3></div>\r\n      <div class=\"col-md-3\"></div>\r\n    </div>\r\n\r\n    <div class=\"row\" style=\"background-color: black\">\r\n      <div class=\"col-md-3\"></div>\r\n      <div class=\"col-md-6\"><h3>Je hebt {{incorrectAnswer}} vra(a)g(en) fout beantwoord.</h3></div>\r\n      <div class=\"col-md-3\"></div>\r\n    </div>\r\n\r\n  </div>\r\n</div>-->\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { SubmittedAnswer } from '../model/submittedanswer';\r\nimport { AnswerIsCorrect } from '../model/answeriscorrect';\r\nimport { UrlService } from './url.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SubmittedAnswerService {\r\n\r\n  private surveyUrl = this.urlService.url + '/submittedanswers/';\r\n\r\n  constructor(private http: HttpClient, \r\n              private urlService: UrlService) {\r\n\r\n  }\r\n  \r\n  postSubmittedAnswer(submittedAnswer: SubmittedAnswer) {\r\n    return this.http.post<AnswerIsCorrect>(this.surveyUrl, submittedAnswer);\r\n  }\r\n\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AnswerIsCorrect } from '../model/answeriscorrect';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SurveyScoreService {\r\n\r\n  private userName = '';\r\n  private correctAnswer = 0;\r\n  private inCorrectAnswer = 0;\r\n  private finishTimestamp: Date;\r\n  private finishTimestampString = '';\r\n\r\n  constructor() { }\r\n\r\n  public getUserName() {\r\n    return this.userName;\r\n  }\r\n\r\n  public setUserName(userName: string) {\r\n    this.userName = userName;\r\n  }\r\n\r\n  public processAnswer(answerIsCorrect: AnswerIsCorrect){\r\n    answerIsCorrect?.isCorrect === true ? this.correctAnswer++ : this.inCorrectAnswer++;\r\n  }\r\n\r\n  public getCorrectAnswers(){\r\n    return this.correctAnswer;\r\n  }\r\n\r\n  public getIncorrectAnswers() {\r\n    return this.inCorrectAnswer;\r\n  }\r\n\r\n  public getFinishTimestamp(): Date {\r\n    return this.finishTimestamp;\r\n  }\r\n\r\n  public setFinishTimestamp(value: Date) {\r\n    this.finishTimestamp = value;\r\n  }\r\n\r\n  public getFinishTimestampString(): string {\r\n    return this.finishTimestampString;\r\n  }\r\n\r\n  public setFinishTimestampString(value: string) {\r\n    this.finishTimestampString = value;\r\n  }\r\n\r\n  public resetScores(){\r\n    this.correctAnswer = 0;\r\n    this.inCorrectAnswer = 0;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\n\r\nimport { UrlService } from './url.service';\r\nimport { Survey } from '../model/survey';\r\nimport {ScoreEntry} from '../model/scoreEntry';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SurveyService {\r\n\r\n  private surveyUrl = this.urlService.url + '/surveys/';\r\n  survey: BehaviorSubject<Survey>;\r\n  scoreEntries: ScoreEntry[] = [];\r\n\r\n/*  scoreEntries: ScoreEntry[] = [{\r\n      'userName': 'Player 1',\r\n      'answersCorrect': 1,\r\n      'finishTimestamp': new Date(),\r\n      'finishTimestampString': '12/07/2020 14:28:23'\r\n    },\r\n    {\r\n      'userName': 'Player 2',\r\n      'answersCorrect': 2,\r\n      'finishTimestamp': new Date(),\r\n      'finishTimestampString': '13/07/2020 18:50:36'\r\n    },\r\n    {\r\n      'userName': 'Player 3',\r\n      'answersCorrect': 3,\r\n      'finishTimestamp': new Date(),\r\n      'finishTimestampString': '14/07/2020 13:03:14'\r\n    }\r\n  ];*/\r\n\r\n  constructor(  private http: HttpClient,\r\n                private urlService: UrlService) {\r\n    this.survey = new BehaviorSubject(null);\r\n  }\r\n\r\n  getInitSurveys(id: number) {\r\n    this.http.get<Survey>(this.surveyUrl + id).subscribe(survey => {\r\n      this.survey.next(survey)\r\n    });\r\n  }\r\n\r\n  public getHighscores() {\r\n    return this.scoreEntries;\r\n  }\r\n\r\n  public addHighScore(scoreEntry: ScoreEntry) {\r\n    this.scoreEntries.push(scoreEntry);\r\n    // after adding a new high score, the table is immediately again sorted.\r\n    this.scoreEntries.sort((a, b) => {\r\n      if (a.answersCorrect < b.answersCorrect) {return 1; }\r\n      if (a.answersCorrect > b.answersCorrect) {return -1; }\r\n      if (a.finishTimestamp < b.finishTimestamp) {return 1; }\r\n      if (a.finishTimestamp > b.finishTimestamp) {return -1; }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n/*  public sortHighScores(scoreEntries: ScoreEntry[]) {\r\n    return this.scoreEntries.sort((a, b) => {\r\n      if (a.answersCorrect > b.answersCorrect) {return 1; }\r\n      if (a.answersCorrect < b.answersCorrect) {return -1; }\r\n      return 0;\r\n    });\r\n  }*/\r\n\r\n  private handleError(err: HttpErrorResponse) {\r\n    // in a real world app, we may send the server to some remote logging infrastructure\r\n    // instead of just logging it to the console\r\n    let errorMessage = '';\r\n    if (err.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      errorMessage = `An error occurred: ${err.error.message}`;\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UrlService {\r\n\r\n  url = 'http://localhost:8080/quiz';\r\n\r\n  constructor() { }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}