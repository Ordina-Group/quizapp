{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///app/app-routing.module.ts","webpack:///app/app.component.ts","webpack:///app/app.component.html","webpack:///app/app.module.ts","webpack:///app/createquiz/create-quiz.component.ts","webpack:///app/createquiz/create-quiz.component.html","webpack:///app/endpage/endpage.component.ts","webpack:///app/endpage/endpage.component.html","webpack:///app/home/home.component.ts","webpack:///app/home/home.component.html","webpack:///app/homescreen/homescreen.component.ts","webpack:///app/homescreen/homescreen.component.html","webpack:///app/namescreen/namescreen.component.ts","webpack:///app/namescreen/namescreen.component.html","webpack:///app/question/question.component.ts","webpack:///app/question/question.component.html","webpack:///app/scoreboard/scoreboard.component.ts","webpack:///app/scoreboard/scoreboard.component.html","webpack:///app/services/quiz-score.service.ts","webpack:///app/services/quiz.service.ts","webpack:///app/services/submitAnswer.service.ts","webpack:///app/services/url.service.ts","webpack:///environments/environment.ts","webpack:///main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","errorMessage","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","CreateQuizComponent","formBuilder","quizService","count","currentQuestion","lockQuizName","newQuiz","questions","quizForm","group","quizName","question","answerOptions","array","addAnswerOption","push","newAnswerOption","get","removeAt","length","answer","iscorrect","saveQuestion","reset","quizname","questionDescription","value","controls","forEach","control","answerOption","toAnswerOption","quizDescription","ac","correctAnswer","postnewQuiz","subscribe","quiz","console","log","deleteAnswerOption","nextQuestion","onSubmit","EndpageComponent","quizScoreService","getCorrectAnswers","incorrectAnswer","getIncorrectAnswers","scoreEntry","userName","getUserName","answersCorrect","finishTimestamp","getFinishTimestamp","finishTimestampString","getFinishTimestampString","postScore","_currentQuiz","HomeComponent","HomescreenComponent","router","chosenQuiz","quizSubject","newquiz","navigate","getInitQuiz","onOpenQuizSubmit","NamescreenComponent","setUserName","resetScores","onNaamSubmit","QuestionComponent","submittedAnswerService","currentQuestionNumber","currentQuiz","filter","undefined","date","Date","dateString","setFinishTimestamp","setFinishTimestampString","answerOptionsArray","submittedAnswer","quizid","chosenAnswerId","chosenAnswer","questionid","number","answeredCorrect","postSubmittedAnswer","answerIsCorrect","saveAnswers","setAnswersToRadiobuttons","processAnswer","onFormSubmit","ScoreboardComponent","getScores","scoreEntries","QuizScoreService","http","urlService","inCorrectAnswer","scoresUrl","url","isCorrect","post","providedIn","QuizService","surveyUrl","next","SubmitAnswerService","submitAnswerUrl","submitAnswer","UrlService","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {HomeComponent} from \"./home/home.component\";\r\nimport {QuestionComponent} from \"./question/question.component\";\r\nimport {EndpageComponent} from \"./endpage/endpage.component\";\r\nimport { HomescreenComponent } from './homescreen/homescreen.component';\r\nimport {CreateQuizComponent} from \"./createquiz/create-quiz.component\";\r\nimport { NamescreenComponent } from './namescreen/namescreen.component';\r\nimport {ScoreboardComponent} from './scoreboard/scoreboard.component';\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: HomescreenComponent},\r\n  {path: 'home', component: HomeComponent},\r\n  {path: 'homescreen', component: HomescreenComponent},\r\n  {path: 'namescreen', component: NamescreenComponent},\r\n  {path: 'question', component: QuestionComponent},\r\n  {path: 'endpage', component:EndpageComponent},\r\n  {path: 'createquiz', component:CreateQuizComponent},\r\n  {path: 'scoreboard', component: ScoreboardComponent},\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  title = 'Welkom bij de quiz';\r\n\r\n  errorMessage = '';\r\n\r\n  constructor() {}\r\n  ngOnInit() {}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<nav class=\"navbar fixed-top\" Style=\"background-color: black; \">\r\n  <ul class=\"navbar-nav\" style=\"background-color: black\">\r\n    <li class=\"nav-item\">\r\n      <img src='./assets/images/ordinalogo.png'>\r\n    </li>\r\n  </ul>\r\n</nav>\r\n<router-outlet></router-outlet>\r\n\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { QuestionComponent } from './question/question.component';\r\nimport { QuizService} from './services/quiz.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule} from '@angular/forms';\r\nimport { EndpageComponent } from './endpage/endpage.component';\r\nimport { SubmitAnswerService } from './services/submitAnswer.service';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CreateQuizComponent } from './createquiz/create-quiz.component';\r\nimport { HomescreenComponent } from './homescreen/homescreen.component';\r\nimport {NamescreenComponent} from './namescreen/namescreen.component';\r\nimport {ScoreboardComponent} from './scoreboard/scoreboard.component';\r\n// import { formatDate } from '@angular/common';\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    QuestionComponent,\r\n    EndpageComponent,\r\n    CreateQuizComponent,\r\n    HomescreenComponent,\r\n    NamescreenComponent,\r\n    ScoreboardComponent,\r\n  ],\r\n\r\n\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [QuizService, SubmitAnswerService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AbstractControl, FormBuilder, FormGroup} from \"@angular/forms\";\r\nimport {Quiz} from \"../model/quiz\";\r\nimport {Question} from \"../model/question\";\r\nimport {FormArray} from '@angular/forms';\r\nimport {AnswerIsCorrect} from \"../model/answerIsCorrect\";\r\nimport {AnswerOption} from \"../model/answerOption\";\r\nimport { QuizService } from '../services/quiz.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-createquiz',\r\n  templateUrl: './create-quiz.component.html',\r\n  styleUrls: ['./create-quiz.component.css']\r\n})\r\nexport class CreateQuizComponent implements OnInit {\r\n\r\n  quiz: number;\r\n  quizForm: FormGroup;\r\n  count: number;\r\n\r\n  newQuiz: Quiz;\r\n  currentQuestion: number;\r\n  lockQuizName: boolean;\r\n\r\n  constructor(private formBuilder: FormBuilder, private quizService: QuizService) {\r\n    this.count = 0;\r\n    this.currentQuestion = 0;\r\n    this.lockQuizName = false;\r\n    this.newQuiz = {questions: []} as Quiz;\r\n\r\n    this.quizForm = this.formBuilder.group({\r\n      quizName: [''],\r\n      question: [''],\r\n      answerOptions: this.formBuilder.array([])\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.addAnswerOption();\r\n  }\r\n\r\n  get answerOptions(): FormArray {\r\n    return this.quizForm.get('answerOptions') as FormArray;\r\n  }\r\n\r\n  addAnswerOption(): void {\r\n    this.answerOptions.push(this.newAnswerOption());\r\n  }\r\n\r\n  deleteAnswerOption() {\r\n    (this.quizForm.get('answerOptions') as FormArray).removeAt(this.answerOptions.length - 1);\r\n  }\r\n\r\n  get quizName(): string {\r\n    return this.quizForm.get('quizName').value\r\n  }\r\n\r\n  private newAnswerOption(): FormGroup {\r\n    return this.formBuilder.group({\r\n      answer: '',\r\n      iscorrect: 'true'\r\n    })\r\n  }\r\n\r\n\r\n  nextQuestion() {\r\n    this.saveQuestion();\r\n    this.lockQuizName = true;\r\n    this.quizForm.get('question').reset();\r\n    this.quizForm.get('answerOptions').reset();\r\n  }\r\n\r\n  // hier wordt answerOptions to question gesaved en alle questions worden in object newQuiz bewaard\r\n  saveQuestion() {\r\n    let quizname = this.quizName;\r\n    let questionDescription = this.quizForm.get('question').value;\r\n\r\n    let question = {answerOptions: []} as Question;\r\n    this.answerOptions.controls.forEach(control => {\r\n      let answerOption = this.toAnswerOption(control)\r\n      question.answerOptions.push(answerOption)\r\n    })\r\n    question.questionDescription = questionDescription;\r\n\r\n    this.newQuiz.quizDescription = quizname;\r\n    this.newQuiz.questions.push(question);\r\n  }\r\n\r\n  private toAnswerOption(ac: AbstractControl): AnswerOption {\r\n    let answerOption = {} as AnswerOption;\r\n    answerOption.value = ac.get('answer').value;\r\n    answerOption.correctAnswer = ac.get('iscorrect').value;\r\n    return answerOption;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.saveQuestion();\r\n    this.quizService.postnewQuiz(this.newQuiz).subscribe(quiz => {\r\n      this.quiz = quiz\r\n      console.log(\"quiz is\");\r\n      console.log(quiz);\r\n    })\r\n    console.log(this.newQuiz);\r\n  }\r\n\r\n}\r\n","<div class=\"jumbotron-fluid d-flex flex-column\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <h1>Maak een nieuwe Quiz</h1>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"jumbotron-fluid d-flex flex-column\">\r\n  <div class=\"container\">\r\n    <div class=\"form-group\" [formGroup]=\"quizForm\">\r\n      <label> Quiz naam:</label>\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-10\">\r\n          <input formControlName=\"quizName\">\r\n        </div>\r\n        <div class=\"col-sm-2\">\r\n          <label></label>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"spaced-row\">\r\n        <div class=\"col-sm-12\">\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <label>Voer een nieuwe Vraag in:</label>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-10\">\r\n            <input formControlName=\"question\">\r\n          </div>\r\n          <div class=\"col-sm-2\">\r\n            <label></label>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"spaced-row\">\r\n          <div class=\"col-sm-12\">\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <label>Voer een nieuw Antwoord in:</label>\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-6 mr-2\">\r\n            <div formArrayName=\"answerOptions\">\r\n              <div [formGroupName]=\"i\" *ngFor=\"let answerOption of answerOptions.controls; let i = index;\">\r\n                <input type=\"text\" formControlName=\"answer\">\r\n                <div class=\"radioBlok\">\r\n                  <label class=\"form-check-label\">\r\n                    <input class=\"form-check-input\" type=\"checkbox\" value=\"true\" formControlName=\"iscorrect\"> correct\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"col-sm-1\">\r\n          </div>\r\n\r\n          <div class=\"col-sm-4 mr-2\">\r\n            <button class=\"btn btn-dark mr-1\" (click)=\"deleteAnswerOption()\">-</button>\r\n            <button class=\"btn btn-dark\" (click)=\"addAnswerOption()\">+</button>\r\n          </div>\r\n\r\n          <div class=\"col-sm-1\">\r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n        <div class=\"col-sm-1\">\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n      <div class=\"row\" style=\"margin-top:5rem \">\r\n\r\n        <div Style=\"background-color:black;\">\r\n          <button class=\"btn btn-dark mr-2\" (click)=\"nextQuestion()\">Maak nog een vraag</button>\r\n        </div>\r\n\r\n        <div Style=\"background-color:black;\">\r\n          <button type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-dark\">Klaar</button>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {ActivatedRoute} from '@angular/router';\r\nimport { QuizScoreService } from '../services/quiz-score.service';\r\nimport {QuizService} from '../services/quiz.service';\r\nimport {ScoreEntry} from '../model/scoreEntry';\r\nimport {Quiz} from \"../model/quiz\";\r\n\r\n@Component({\r\n  selector: 'app-endpage',\r\n  templateUrl: './endpage.component.html',\r\n  styleUrls: ['./endpage.component.css']\r\n})\r\nexport class EndpageComponent implements OnInit {\r\n  correctAnswer: number;\r\n  incorrectAnswer: number;\r\n  scoreEntry: ScoreEntry;\r\n  private _currentQuiz: Quiz;\r\n\r\n  constructor(private quizService: QuizService, private quizScoreService: QuizScoreService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.correctAnswer = this.quizScoreService.getCorrectAnswers();\r\n    this.incorrectAnswer = this.quizScoreService.getIncorrectAnswers();\r\n\r\n    this.scoreEntry =     {\r\n      userName: this.quizScoreService.getUserName(),\r\n      answersCorrect: this.quizScoreService.getCorrectAnswers(),\r\n      finishTimestamp: this.quizScoreService.getFinishTimestamp(),\r\n      finishTimestampString: this.quizScoreService.getFinishTimestampString(),\r\n    };\r\n\r\n\r\n    this.quizScoreService.postScore(this.scoreEntry, this._currentQuiz.id);\r\n\r\n  }\r\n\r\n}\r\n","<div class=\"jumbotron-fluid\">\r\n  <div class=\"container mx-auto\" style=\"margin-top: 2rem\">\r\n    <div class=\"row\">\r\n      <h2>Dit was het einde van de Quiz!</h2>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<div class=\"jumbotron-fluid\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-3\"></div>\r\n      <div class=\"col-md-6\"><h3>Je hebt {{correctAnswer}} vra(a)g(en) goed beantwoord.</h3></div>\r\n      <div class=\"col-md-3\"></div>\r\n    </div>\r\n\r\n    <div class=\"row\" style=\"background-color: black\">\r\n      <div class=\"col-md-3\"></div>\r\n      <div class=\"col-md-6\"><h3>Je hebt {{incorrectAnswer}} vra(a)g(en) fout beantwoord.</h3></div>\r\n      <div class=\"col-md-3\"></div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <h2 class='mx-auto'><button [routerLink]=\"['/scoreboard']\" class=\"btn btn-dark btn-lg btn-block\">Ga naar het scorebord</button></h2>\r\n    </div>\r\n\r\n  </div>\r\n  </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n\r\n","<div class=\"jumbotron-fluid\" Style=\"background-image: url('./assets/images/code.jpg');\">\r\n  <div class=\"container mx-auto\">\r\n    <div class=\"row\">\r\n      <h1 class='mx-auto' style=\"margin-top: 4rem;\" >Welkom bij de Ordina developers Quiz!</h1>\r\n    </div>\r\n    <div class=\"row\" >\r\n      <h2 class='mx-auto' style=\"margin-top: 8rem;\" ><button [routerLink]=\"['/question']\" class=\"btn btn-dark btn-lg btn-block\">Start Quiz</button></h2>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {Quiz} from \"../model/quiz\";\r\nimport {QuizService} from \"../services/quiz.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-homescreen',\r\n  templateUrl: './homescreen.component.html',\r\n  styleUrls: ['./homescreen.component.css']\r\n})\r\nexport class HomescreenComponent implements OnInit {\r\n\r\n  chosenQuiz: number;\r\n\r\n  constructor(private quizService: QuizService, private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onOpenQuizSubmit() {\r\n    console.log(\"chosen quiz: \" + this.chosenQuiz)\r\n    this.quizService.quizSubject.subscribe(newquiz => {\r\n      if (newquiz!=null){\r\n        console.log('Test');\r\n      this.router.navigate(['/namescreen'])\r\n      }\r\n      console.log(newquiz)\r\n    })\r\n    this.quizService.getInitQuiz(this.chosenQuiz);\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"jumbotron jumbotron-fluid\" Style=\"background-color:black\">\r\n  <div class=\"container mx-auto\">\r\n    <div class=\"row align-items-start\">\r\n      <h1 class='mx-auto' style=\"margin-top: 4rem;\" >Welkom bij de Ordina Quizapp!</h1>\r\n    </div>\r\n  </div>\r\n    <div class=\"container mx-auto\" style=\"margin-top: 4rem\">\r\n      <h2>Voer een Quiznummer in:</h2>\r\n      <form #homescreenForm=\"ngForm\" (ngSubmit)=\"onOpenQuizSubmit()\">\r\n        <div class=\"form-inline justify-content-center\">\r\n          <input class=\"form-control mr-1\" [(ngModel)]=\"chosenQuiz\" [ngModelOptions]=\"{standalone: true}\">\r\n          <button type=\"submit\"  class=\"btn btn-dark\">Open Quiz</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n\r\n  <div class=\"container mx-auto\" style=\"margin-top: 4rem\">\r\n    <h2>Of:</h2>\r\n    <div class=\"form-inline justify-content-center\">\r\n      <button [routerLink]=\"['/createquiz']\" class=\"btn btn-dark\">Maak een nieuwe Quiz</button>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {QuizScoreService} from '../services/quiz-score.service';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-namescreen',\r\n  templateUrl: './namescreen.component.html',\r\n  styleUrls: ['./namescreen.component.css']\r\n})\r\nexport class NamescreenComponent implements OnInit {\r\n\r\n  userName: string;\r\n\r\n  constructor(private quizScoreService: QuizScoreService,\r\n              private router: Router) {\r\n  }\r\n\r\n  onNaamSubmit() {\r\n    console.log('name entered: ' + this.userName);\r\n    this.quizScoreService.setUserName(this.userName);\r\n    this.quizScoreService.resetScores();\r\n    this.router.navigate(['/question']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n","<!--<div class=\"jumbotron-fluid\" Style=\"background-image: url('./assets/images/code.jpg');\">\r\n  <div class=\"container mx-auto\">\r\n    <div class=\"row\">\r\n      <h2 class='mx-auto' style=\"margin-top: 4rem;\" >Voer hier je naam in:</h2>\r\n    </div>\r\n    <div class=\"row\">\r\n      <form #namescreenForm=\"ngForm\" (ngSubmit)=\"onNaamSubmit()\">\r\n        <div class=\"form-name justify-content-center\">\r\n          <input class=\"form-control mr-1\" [(ngModel)]=\"userName\" [ngModelOptions]=\"{standalone: true}\">\r\n          <button type=\"submit\"  class=\"btn btn-dark\">Naar de eerste vraag</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>-->\r\n\r\n<div class=\"jumbotron jumbotron-fluid\" Style=\"background-color:black\">\r\n  <div class=\"container mx-auto\" style=\"margin-top: 4rem\">\r\n    <h2 class='mx-auto' style=\"margin-top: 4rem;\" >Voer hier je naam in:</h2>\r\n<!--    <div class=\"row\">\r\n    </div>-->\r\n    <form #homescreenForm=\"ngForm\" (ngSubmit)=\"onNaamSubmit()\">\r\n      <div class=\"form-inline justify-content-center\">\r\n        <input class=\"form-control mr-1\" size=\"15\" [(ngModel)]=\"userName\" [ngModelOptions]=\"{standalone: true}\">\r\n        <button type=\"submit\"  class=\"btn btn-dark\">Naar de eerste vraag</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { QuizService } from '../services/quiz.service';\r\nimport { SubmitAnswer } from '../model/submitAnswer';\r\nimport { AnswerIsCorrect } from '../model/answeriscorrect';\r\nimport { NavigationExtras, Router} from \"@angular/router\";\r\nimport { AnswerOption } from '../model/answerOption';\r\nimport { Question } from '../model/question';\r\nimport { SubmitAnswerService } from '../services/submitAnswer.service';\r\nimport { Quiz } from '../model/quiz';\r\nimport { QuizScoreService } from '../services/quiz-score.service';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.css']\r\n})\r\nexport class QuestionComponent implements OnInit {\r\n\r\n  private _currentQuiz: Quiz;\r\n  currentQuestion: Question;\r\n  answerOptionsArray: AnswerOption[];\r\n  chosenAnswer: AnswerOption;\r\n\r\n  submittedAnswer: SubmitAnswer;\r\n  answerIsCorrect: AnswerIsCorrect;\r\n\r\n  currentQuestionNumber = 0;\r\n  errorMessage = '';\r\n  private date: Date;\r\n  private dateString: string;\r\n\r\n  constructor(private quizService: QuizService,\r\n              private submittedAnswerService: SubmitAnswerService,\r\n              private quizScoreService: QuizScoreService,\r\n              private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.quizService.quizSubject.subscribe(quiz => {\r\n      this.currentQuiz = quiz;\r\n    })\r\n  }\r\n  public get currentQuiz(): Quiz {\r\n    return this._currentQuiz;\r\n  }\r\n\r\n  public set currentQuiz(value: Quiz) {\r\n    this._currentQuiz = value;\r\n    if(this._currentQuiz !== undefined && this._currentQuiz !== null){\r\n      this.setAnswersToRadiobuttons();\r\n    }\r\n  }\r\n\r\n  // hier wordt de String array\"answers\" geleegd in de functie,\r\n  // vervolgens wordt de array gelijk /gematched aan de answeroption van deze vraag die uit de database zijn gehaald\r\n  // In de forloop (HTML) wordt dan de answers gematched met dezelfde value waarde (dus antwoord A wordt radiobutton met Antwoord A)\r\n  setAnswersToRadiobuttons() {\r\n    this.currentQuestion = this.currentQuiz.questions.filter(question => {\r\n      return question.id === this.currentQuestionNumber + 1;\r\n    })[0];\r\n\r\n    if (this.currentQuestion === undefined) {\r\n      console.log('currentquestion is: ' + this.currentQuestion)\r\n      this.date = new Date();\r\n      this.dateString = formatDate(this.date, 'dd/MM/yyyy HH:mm:ss', 'en');\r\n      this.quizScoreService.setFinishTimestamp(this.date);\r\n      this.quizScoreService.setFinishTimestampString(this.dateString);\r\n      this.router.navigate(['/endpage']);\r\n      return;\r\n    }\r\n    this.answerOptionsArray = this.currentQuestion.answerOptions;\r\n\r\n  }\r\n\r\n\r\n  onFormSubmit() {\r\n    this.submittedAnswer = {quizid: this.currentQuiz.id , chosenAnswerId: this.chosenAnswer.id , questionid: this.currentQuestion.number, answeredCorrect: false};\r\n    this.submittedAnswerService.postSubmittedAnswer(this.submittedAnswer).subscribe(answerIsCorrect => {\r\n      this.answerIsCorrect = answerIsCorrect;\r\n      this.saveAnswers();\r\n    })\r\n  }\r\n\r\n  // als je op knop \"volgende\" drukt wil je de volgende vraag laten zien\r\n  nextQuestion() {\r\n    this.currentQuestionNumber++;\r\n    this.setAnswersToRadiobuttons();\r\n    this.answerIsCorrect = null;\r\n    this.chosenAnswer = null;\r\n  }\r\n\r\n  //hier worden alle goede en foute antwoorden bijgehouden\r\n  saveAnswers(){\r\n    this.quizScoreService.processAnswer(this.answerIsCorrect);\r\n  }\r\n\r\n}\r\n","<div class=\"jumbotron-fluid\" Style=\"background-image: url('./assets/images/traffic.jpg'); height: 250px\">\r\n  <div class=\"container mx-auto\">\r\n    <div class=\"row\">\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"jumbotron-fluid d-flex flex-column\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <h2> {{ currentQuestion?.questionDescription}}</h2>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"container\">\r\n    <div class=\"row col-sm-12\">\r\n    </div>\r\n\r\n    <div class=\"row col-sm-12\">\r\n      <div class=\"col-sm-6\">\r\n      <!-- form-->\r\n      <form #questionForm=\"ngForm\" (ngSubmit)=\"onFormSubmit()\">\r\n\r\n        <div class=\"radioBlok\" *ngFor=\"let answerOption of answerOptionsArray\">\r\n          <input type=\"radio\" name=\"answerButtons\" [(ngModel)]=\"chosenAnswer\" [value]=\"answerOption\">\r\n          <label class=\"antwoordLabel\">{{answerOption.value}}</label>\r\n        </div>\r\n\r\n        <button class=\"btn btn-light btn-sm\" type=\"submit\" *ngIf=\"chosenAnswer?.value != null && answerIsCorrect == null\">\r\n          Submit\r\n        </button>\r\n\r\n      </form>\r\n      </div>\r\n      <div *ngIf=\"answerIsCorrect\" class=\"col-sm-6\" style=\"background-color: white\" [ngStyle]=\"{ 'color': answerIsCorrect?.isCorrect === true ? 'green' : 'red' }\">\r\n        {{answerIsCorrect.answerExplanation}}\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"container mx-auto\">\r\n  <div class=\"row col-sm-12\" style=\"margin: 5px; background-color: white\">\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-1\" Style=\"background-color:black;\" *ngIf=\"answerIsCorrect\">\r\n      <p style=\"margin: 1rem;\"><button class=\"btn btn-dark btn-lg\" (click)=\"nextQuestion()\">Volgende</button></p>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {QuizService} from '../services/quiz.service';\r\nimport {QuizScoreService} from '../services/quiz-score.service';\r\nimport {ScoreEntry} from '../model/scoreEntry';\r\nimport {Quiz} from '../model/quiz';\r\n\r\n@Component({\r\n  selector: 'app-scoreboard',\r\n  templateUrl: './scoreboard.component.html',\r\n  styleUrls: ['./scoreboard.component.css']\r\n})\r\nexport class ScoreboardComponent implements OnInit {\r\n  scoreEntry: ScoreEntry;\r\n  scoreEntries: ScoreEntry[];\r\n  private _currentQuiz: Quiz;\r\n\r\n  constructor(private quizService: QuizService, private quizScoreService: QuizScoreService) {\r\n/*    this.scoreEntry =     {\r\n      'userName': quizScoreService.getUserName(),\r\n      'answersCorrect': quizScoreService.getCorrectAnswers(),\r\n      'finishTimestamp': quizScoreService.getFinishTimestamp(),\r\n      'finishTimestampString': quizScoreService.getFinishTimestampString(),\r\n    };*/\r\n//    quizService.addHighScore(this.scoreEntry);\r\n//    this.scoreEntries = getHighScores();\r\n\r\n\r\n\r\n/*      this.quizScoreService.getScores().subscribe((data: ScoreEntry) =>\r\n      this.scoreEntry = {\r\n        userName: data.userName,\r\n        answersCorrect: data.answersCorrect,\r\n        finishTimestamp: data.finishTimestamp,\r\n        finishTimestampString: data.finishTimestampString\r\n      });*/\r\n/*      console.log(this.scoreEntry);\r\n      console.log(this.scoreEntry.userName);\r\n      console.log(this.scoreEntry.answersCorrect);\r\n      console.log(this.scoreEntry.finishTimestamp);\r\n      console.log(this.scoreEntry.finishTimestampString);*/\r\n//    this.surveyScoreService.resetScores();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.quizScoreService.getScores(this._currentQuiz.id).subscribe(scoreEntries => {\r\n      console.log(scoreEntries);\r\n      this.scoreEntries = scoreEntries;\r\n    });\r\n  }\r\n}\r\n","<div class=\"jumbotron-fluid\">\r\n  <div class=\"container mx-auto\" style=\"margin-top: 2rem\">\r\n    <div class=\"row\">\r\n      <h2>High scores:</h2>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"container mx-auto\" style=\"margin-top: 4rem\">\r\n\r\n<table class='table'>\r\n  <thead>\r\n  <tr>\r\n    <th>Naam:</th>\r\n    <th>Score:</th>\r\n    <th>Tijdstip van afronding:</th>\r\n  </tr>\r\n  </thead>\r\n  <tbody>\r\n  <tr *ngFor='let scoreEntry of scoreEntries'>\r\n    <td>{{scoreEntry.userName}}</td>\r\n    <td>{{scoreEntry.answersCorrect}}</td>\r\n    <td>{{scoreEntry.finishTimestampString}}</td>\r\n  </tr>\r\n  </tbody>\r\n</table>\r\n</div>\r\n\r\n<div class=\"row\">\r\n  <h2 class='mx-auto'><button [routerLink]=\"['/namescreen']\" class=\"btn btn-dark btn-lg btn-block\">Probeer het nog een keer</button></h2>\r\n</div>\r\n\r\n\r\n<!--<div class=\"jumbotron-fluid\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-3\"></div>\r\n      <div class=\"col-md-6\"><h3>Je hebt {{correctAnswer}} vra(a)g(en) goed beantwoord.</h3></div>\r\n      <div class=\"col-md-3\"></div>\r\n    </div>\r\n\r\n    <div class=\"row\" style=\"background-color: black\">\r\n      <div class=\"col-md-3\"></div>\r\n      <div class=\"col-md-6\"><h3>Je hebt {{incorrectAnswer}} vra(a)g(en) fout beantwoord.</h3></div>\r\n      <div class=\"col-md-3\"></div>\r\n    </div>\r\n\r\n  </div>\r\n</div>-->\r\n","import { Injectable } from '@angular/core';\r\nimport { AnswerIsCorrect } from '../model/answeriscorrect';\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {UrlService} from \"./url.service\";\r\nimport {BehaviorSubject} from \"rxjs\";\r\nimport {ScoreEntry} from \"../model/scoreEntry\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuizScoreService {\r\n\r\n  private userName = '';\r\n  private correctAnswer = 0;\r\n  private inCorrectAnswer = 0;\r\n  private finishTimestamp: Date;\r\n  private finishTimestampString = '';\r\n  private scoresUrl = this.urlService.url + '/scores/';\r\n\r\n\r\n  constructor(  private http: HttpClient,\r\n                private urlService: UrlService) {\r\n  }\r\n\r\n  public getUserName() {\r\n    return this.userName;\r\n  }\r\n\r\n  public setUserName(userName: string) {\r\n    this.userName = userName;\r\n  }\r\n\r\n  public processAnswer(answerIsCorrect: AnswerIsCorrect){\r\n    answerIsCorrect?.isCorrect === true ? this.correctAnswer++ : this.inCorrectAnswer++;\r\n  }\r\n\r\n  getScores(id: number) {\r\n    return this.http.get<ScoreEntry[]>(this.scoresUrl + id); }\r\n\r\n  postScore(scoreEntry: ScoreEntry, id: number) {\r\n    this.http.post(this.scoresUrl + id, scoreEntry); }\r\n\r\n  public getCorrectAnswers(){\r\n    return this.correctAnswer;\r\n  }\r\n\r\n  public getIncorrectAnswers() {\r\n    return this.inCorrectAnswer;\r\n  }\r\n\r\n  public getFinishTimestamp(): Date {\r\n    return this.finishTimestamp;\r\n  }\r\n\r\n  public setFinishTimestamp(value: Date) {\r\n    this.finishTimestamp = value;\r\n  }\r\n\r\n  public getFinishTimestampString(): string {\r\n    return this.finishTimestampString;\r\n  }\r\n\r\n  public setFinishTimestampString(value: string) {\r\n    this.finishTimestampString = value;\r\n  }\r\n\r\n  public resetScores(){\r\n    this.correctAnswer = 0;\r\n    this.inCorrectAnswer = 0;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\nimport { HttpErrorHandler, HandleError } from '../http-error-handler.service';\r\nimport { UrlService } from './url.service';\r\nimport { Quiz } from '../model/quiz';\r\nimport { ScoreEntry } from '../model/scoreEntry';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuizService {\r\n\r\n\r\n  private surveyUrl = this.urlService.url + \"/\";\r\n  quizSubject: BehaviorSubject<Quiz>;\r\n  scoreEntries: ScoreEntry[] = [];\r\n\r\n\r\n  constructor(private http: HttpClient, private urlService: UrlService) {\r\n    this.quizSubject = new BehaviorSubject(null);\r\n  }\r\n\r\n  getInitQuiz(id: number) {\r\n    this.http.get<Quiz>(this.surveyUrl + id).subscribe(quiz => {\r\n      this.quizSubject.next(quiz)\r\n    });\r\n  }\r\n\r\n  postnewQuiz(newQuiz: Quiz) {\r\n    return this.http.post<number>(this.surveyUrl, newQuiz);\r\n  }\r\n\r\n/*  public get quizId() {\r\n    return this.survey.getValue().id;\r\n  }*/\r\n\r\n  /*  public getHighscores() {\r\n      return this.scoreEntries;\r\n    }\r\n\r\n    public addHighScore(scoreEntry: ScoreEntry) {\r\n      this.scoreEntries.push(scoreEntry);\r\n      // after adding a new high score, the table is immediately again sorted.\r\n      this.scoreEntries.sort((a, b) => {\r\n        if (a.answersCorrect < b.answersCorrect) {return 1; }\r\n        if (a.answersCorrect > b.answersCorrect) {return -1; }\r\n        if (a.finishTimestamp < b.finishTimestamp) {return 1; }\r\n        if (a.finishTimestamp > b.finishTimestamp) {return -1; }\r\n        return 0;\r\n      });\r\n    }\r\n\r\n    private handleError(err: HttpErrorResponse) {\r\n      // in a real world app, we may send the server to some remote logging infrastructure\r\n      // instead of just logging it to the console\r\n      let errorMessage = '';\r\n      if (err.error instanceof ErrorEvent) {\r\n        // A client-side or network error occurred. Handle it accordingly.\r\n        errorMessage = `An error occurred: ${err.error.message}`;\r\n      } else {\r\n        // The backend returned an unsuccessful response code.\r\n        // The response body may contain clues as to what went wrong,\r\n        errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\r\n      }\r\n      console.error(errorMessage);\r\n      return throwError(errorMessage);\r\n    }\r\n  */\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { SubmitAnswer } from '../model/submitAnswer';\r\nimport { AnswerIsCorrect } from '../model/answeriscorrect';\r\nimport { UrlService } from './url.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SubmitAnswerService {\r\n\r\n  private submitAnswerUrl = this.urlService.url + '/submittedanswers/';\r\n\r\n  constructor(private http: HttpClient,\r\n              private urlService: UrlService) {\r\n\r\n  }\r\n\r\n  postSubmittedAnswer(submitAnswer: SubmitAnswer) {\r\n    return this.http.post<AnswerIsCorrect>(this.submitAnswerUrl, submitAnswer);\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UrlService {\r\n\r\n  url = 'http://localhost:8080/quiz';\r\n\r\n  constructor() { }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}